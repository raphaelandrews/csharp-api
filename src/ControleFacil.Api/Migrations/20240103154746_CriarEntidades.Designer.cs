// <auto-generated />
using System;
using ControleFacil.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ControleFacil.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240103154746_CriarEntidades")]
    partial class CriarEntidades
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.PlayerNorms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Norm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("playerNorms", (string)null);
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.PlayerPodiums", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TournamentId1")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("playerPodiums", (string)null);
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.PlayerTournaments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("OldRating")
                        .HasColumnType("integer");

                    b.Property<string>("RatingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TournamentId1")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.Property<int>("Variation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("playerTournaments", (string)null);
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChessResults")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("tournament", (string)null);
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp");

                    b.Property<int>("Blitz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1900);

                    b.Property<int>("CbxId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Classic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1900);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("FideId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Rapid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1900);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.PlayerNorms", b =>
                {
                    b.HasOne("ControleFacil.Api.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleFacil.Api.Domain.Models.User", null)
                        .WithMany("PlayerNorms")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.PlayerPodiums", b =>
                {
                    b.HasOne("ControleFacil.Api.Domain.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleFacil.Api.Domain.Models.Tournament", null)
                        .WithMany("PlayerPodiums")
                        .HasForeignKey("TournamentId1");

                    b.HasOne("ControleFacil.Api.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleFacil.Api.Domain.Models.User", null)
                        .WithMany("PlayerPodiums")
                        .HasForeignKey("UserId1");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.PlayerTournaments", b =>
                {
                    b.HasOne("ControleFacil.Api.Domain.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleFacil.Api.Domain.Models.Tournament", null)
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("TournamentId1");

                    b.HasOne("ControleFacil.Api.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleFacil.Api.Domain.Models.User", null)
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("UserId1");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.Tournament", b =>
                {
                    b.Navigation("PlayerPodiums");

                    b.Navigation("PlayerTournaments");
                });

            modelBuilder.Entity("ControleFacil.Api.Domain.Models.User", b =>
                {
                    b.Navigation("PlayerNorms");

                    b.Navigation("PlayerPodiums");

                    b.Navigation("PlayerTournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
